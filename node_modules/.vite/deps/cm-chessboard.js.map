{
  "version": 3,
  "sources": ["../../cm-chessboard/src/model/Position.js", "../../cm-chessboard/src/model/ChessboardState.js", "../../cm-chessboard/src/lib/Svg.js", "../../cm-chessboard/src/model/Extension.js", "../../cm-chessboard/src/lib/Utils.js", "../../cm-chessboard/src/view/PositionAnimationsQueue.js", "../../cm-chessboard/src/view/VisualMoveInput.js", "../../cm-chessboard/src/view/ChessboardView.js", "../../cm-chessboard/src/Chessboard.js"],
  "sourcesContent": ["/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nexport const FEN = {\n    start: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n    empty: \"8/8/8/8/8/8/8/8\"\n}\n\nexport class Position {\n\n    constructor(fen = FEN.empty) {\n        this.squares = new Array(64).fill(null)\n        this.setFen(fen)\n    }\n\n    setFen(fen = FEN.empty) {\n        const parts = fen.replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").split(/\\/|\\s/)\n        for (let part = 0; part < 8; part++) {\n            const row = parts[7 - part].replace(/\\d/g, (str) => {\n                const numSpaces = parseInt(str)\n                let ret = ''\n                for (let i = 0; i < numSpaces; i++) {\n                    ret += '-'\n                }\n                return ret\n            })\n            for (let c = 0; c < 8; c++) {\n                const char = row.substring(c, c + 1)\n                let piece = null\n                if (char !== '-') {\n                    if (char.toUpperCase() === char) {\n                        piece = `w${char.toLowerCase()}`\n                    } else {\n                        piece = `b${char}`\n                    }\n                }\n                this.squares[part * 8 + c] = piece\n            }\n        }\n    }\n\n    getFen() {\n        let parts = new Array(8).fill(\"\")\n        for (let part = 0; part < 8; part++) {\n            let spaceCounter = 0\n            for (let i = 0; i < 8; i++) {\n                const piece = this.squares[part * 8 + i]\n                if (!piece) {\n                    spaceCounter++\n                } else {\n                    if (spaceCounter > 0) {\n                        parts[7 - part] += spaceCounter\n                        spaceCounter = 0\n                    }\n                    const color = piece.substring(0, 1)\n                    const name = piece.substring(1, 2)\n                    if (color === \"w\") {\n                        parts[7 - part] += name.toUpperCase()\n                    } else {\n                        parts[7 - part] += name\n                    }\n                }\n            }\n            if (spaceCounter > 0) {\n                parts[7 - part] += spaceCounter\n                spaceCounter = 0\n            }\n        }\n        return parts.join(\"/\")\n    }\n\n    getPieces(pieceColor = undefined, pieceType = undefined, sortBy = ['k', 'q', 'r', 'b', 'n', 'p']) {\n        const pieces = []\n        const sort = (a, b) => {\n            return sortBy.indexOf(a.name) - sortBy.indexOf(b.name)\n        }\n        for (let i = 0; i < 64; i++) {\n            const piece = this.squares[i]\n            if (piece) {\n                const type = piece.charAt(1)\n                const color = piece.charAt(0)\n                const square = Position.indexToSquare(i)\n                if(pieceType && pieceType !== type || pieceColor && pieceColor !== color) {\n                    continue\n                }\n                pieces.push({\n                    name: type, // deprecated, use type\n                    type: type,\n                    color: color,\n                    position: square, // deprecated, use square\n                    square: square\n                })\n            }\n        }\n        if (sortBy) {\n            pieces.sort(sort)\n        }\n        return pieces\n    }\n\n    movePiece(squareFrom, squareTo) {\n        if (!this.squares[Position.squareToIndex(squareFrom)]) {\n            console.warn(\"no piece on\", squareFrom)\n            return\n        }\n        this.squares[Position.squareToIndex(squareTo)] = this.squares[Position.squareToIndex(squareFrom)]\n        this.squares[Position.squareToIndex(squareFrom)] = null\n    }\n\n    setPiece(square, piece) {\n        this.squares[Position.squareToIndex(square)] = piece\n    }\n\n    getPiece(square) {\n        return this.squares[Position.squareToIndex(square)]\n    }\n\n    static squareToIndex(square) {\n        const coordinates = Position.squareToCoordinates(square)\n        return coordinates[0] + coordinates[1] * 8\n    }\n\n    static indexToSquare(index) {\n        return this.coordinatesToSquare([Math.floor(index % 8), index / 8])\n    }\n\n    static squareToCoordinates(square) {\n        const file = square.charCodeAt(0) - 97\n        const rank = square.charCodeAt(1) - 49\n        return [file, rank]\n    }\n\n    static coordinatesToSquare(coordinates) {\n        const file = String.fromCharCode(coordinates[0] + 97)\n        const rank = String.fromCharCode(coordinates[1] + 49)\n        return file + rank\n    }\n\n    toString() {\n        return this.getFen()\n    }\n\n    clone() {\n        const cloned = new Position()\n        cloned.squares = this.squares.slice(0)\n        return cloned\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {Position} from \"./Position.js\"\n\nexport class ChessboardState {\n\n    constructor() {\n        this.position = new Position()\n        this.orientation = undefined\n        this.inputWhiteEnabled = false\n        this.inputBlackEnabled = false\n        this.squareSelectEnabled = false\n        this.moveInputCallback = null\n        this.extensionPoints = {}\n        this.moveInputProcess = Promise.resolve()\n    }\n\n    inputEnabled() {\n        return this.inputWhiteEnabled || this.inputBlackEnabled\n    }\n\n    invokeExtensionPoints(name, data = {}) {\n        const extensionPoints = this.extensionPoints[name]\n        const dataCloned = Object.assign({}, data)\n        dataCloned.extensionPoint = name\n        let returnValue = true\n        if (extensionPoints) {\n            for (const extensionPoint of extensionPoints) {\n                if(extensionPoint(dataCloned) === false) {\n                    returnValue = false\n                }\n            }\n        }\n        return returnValue\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\"\n\nexport class Svg {\n\n    /**\n     * create the Svg in the HTML DOM\n     * @param containerElement\n     * @returns {Element}\n     */\n    static createSvg(containerElement = undefined) {\n        let svg = document.createElementNS(SVG_NAMESPACE, \"svg\")\n        if (containerElement) {\n            svg.setAttribute(\"width\", \"100%\")\n            svg.setAttribute(\"height\", \"100%\")\n            containerElement.appendChild(svg)\n        }\n        return svg\n    }\n\n    /**\n     * Add an Element to an SVG DOM\n     * @param parent\n     * @param name\n     * @param attributes\n     * @returns {Element}\n     */\n    static addElement(parent, name, attributes = {}) {\n        let element = document.createElementNS(SVG_NAMESPACE, name)\n        if (name === \"use\") {\n            attributes[\"xlink:href\"] = attributes[\"href\"] // fix for safari\n        }\n        for (let attribute in attributes) {\n            if (attributes.hasOwnProperty(attribute)) {\n                if (attribute.indexOf(\":\") !== -1) {\n                    const value = attribute.split(\":\")\n                    element.setAttributeNS(\"http://www.w3.org/1999/\" + value[0], value[1], attributes[attribute])\n                } else {\n                    element.setAttribute(attribute, attributes[attribute])\n                }\n            }\n        }\n        parent.appendChild(element)\n        return element\n    }\n\n    /**\n     * Remove an element from an SVG DOM\n     * @param element\n     */\n    static removeElement(element) {\n        if(!element) {\n            console.warn(\"removeElement, element is\", element)\n            return\n        }\n        if (element.parentNode) {\n            element.parentNode.removeChild(element)\n        } else {\n            console.warn(element, \"without parentNode\")\n        }\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport const EXTENSION_POINT = {\n    positionChanged: \"positionChanged\", // the positions of the pieces was changed\n    boardChanged: \"boardChanged\", // the board (orientation) was changed\n    moveInputToggled: \"moveInputToggled\", // move input was enabled or disabled\n    moveInput: \"moveInput\", // move started, moving over a square, validating or canceled\n    beforeRedrawBoard: \"beforeRedrawBoard\", // called before redrawing the board\n    afterRedrawBoard: \"afterRedrawBoard\", // called after redrawing the board\n    redrawBoard: \"redrawBoard\", // called after redrawing the board, DEPRECATED, use afterRedrawBoard 2023-09-18\n    animation: \"animation\", // called on animation start, end, and on every animation frame\n    destroy: \"destroy\" // called, before the board is destroyed\n}\n\nexport class Extension {\n\n    constructor(chessboard) {\n        this.chessboard = chessboard\n    }\n\n    registerExtensionPoint(name, callback) {\n        if(name === EXTENSION_POINT.redrawBoard) { // deprecated 2023-09-18\n            console.warn(\"EXTENSION_POINT.redrawBoard is deprecated, use EXTENSION_POINT.afterRedrawBoard\")\n            name = EXTENSION_POINT.afterRedrawBoard\n        }\n        if (!this.chessboard.state.extensionPoints[name]) {\n            this.chessboard.state.extensionPoints[name] = []\n        }\n        this.chessboard.state.extensionPoints[name].push(callback)\n    }\n\n    /** @deprecated 2023-05-18 */\n    registerMethod(name, callback) {\n        console.warn(\"registerMethod is deprecated, just add methods directly to the chessboard instance\")\n        if (!this.chessboard[name]) {\n            this.chessboard[name] = (...args) => {\n                return callback.apply(this, args)\n            }\n        } else {\n            log.error(\"method\", name, \"already exists\")\n        }\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport class Utils {\n\n    static delegate(element, eventName, selector, handler) {\n        const eventListener = function (event) {\n            let target = event.target\n            while (target && target !== this) {\n                if (target.matches(selector)) {\n                    handler.call(target, event)\n                }\n                target = target.parentNode\n            }\n        }\n        element.addEventListener(eventName, eventListener)\n        return {\n            remove: function () {\n                element.removeEventListener(eventName, eventListener)\n            }\n        }\n    }\n\n    static mergeObjects(target, source) {\n        const isObject = (obj) => obj && typeof obj === 'object'\n        if (!isObject(target) || !isObject(source)) {\n            return source\n        }\n        for (const key of Object.keys(source)) {\n            if (source[key] instanceof Object) {\n                Object.assign(source[key], Utils.mergeObjects(target[key], source[key]))\n            }\n        }\n        Object.assign(target || {}, source)\n        return target\n    }\n\n    static createDomElement(html) {\n        const template = document.createElement('template')\n        template.innerHTML = html.trim()\n        return template.content.firstChild\n    }\n\n    static createTask() {\n        let resolve, reject\n        const promise = new Promise(function (_resolve, _reject) {\n            resolve = _resolve\n            reject = _reject\n        })\n        promise.resolve = resolve\n        promise.reject = reject\n        return promise\n    }\n\n    static isAbsoluteUrl(url) {\n        return url.indexOf(\"://\") !== -1 || url.startsWith(\"/\")\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {FEN, Position} from \"../model/Position.js\"\nimport {Svg} from \"../lib/Svg.js\"\nimport {EXTENSION_POINT} from \"../model/Extension.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\n/*\n* Thanks to markosyan for the idea of the PromiseQueue\n* https://medium.com/@karenmarkosyan/how-to-manage-promises-into-dynamic-queue-with-vanilla-javascript-9d0d1f8d4df5\n*/\n\nexport const ANIMATION_EVENT_TYPE = {\n    start: \"start\",\n    frame: \"frame\",\n    end: \"end\"\n}\n\nexport class PromiseQueue {\n\n    constructor() {\n        this.queue = []\n        this.workingOnPromise = false\n        this.stop = false\n    }\n\n    async enqueue(promise) {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                promise, resolve, reject,\n            })\n            this.dequeue()\n        })\n    }\n\n    dequeue() {\n        if (this.workingOnPromise) {\n            return\n        }\n        if (this.stop) {\n            this.queue = []\n            this.stop = false\n            return\n        }\n        const entry = this.queue.shift()\n        if (!entry) {\n            return\n        }\n        try {\n            this.workingOnPromise = true\n            entry.promise().then((value) => {\n                this.workingOnPromise = false\n                entry.resolve(value)\n                this.dequeue()\n            }).catch(err => {\n                this.workingOnPromise = false\n                entry.reject(err)\n                this.dequeue()\n            })\n        } catch (err) {\n            this.workingOnPromise = false\n            entry.reject(err)\n            this.dequeue()\n        }\n        return true\n    }\n\n    destroy() {\n        this.stop = true\n    }\n\n}\n\n\nconst CHANGE_TYPE = {\n    move: 0,\n    appear: 1,\n    disappear: 2\n}\n\nexport class PositionsAnimation {\n\n    constructor(view, fromPosition, toPosition, duration, callback) {\n        this.view = view\n        if (fromPosition && toPosition) {\n            this.animatedElements = this.createAnimation(fromPosition.squares, toPosition.squares)\n            this.duration = duration\n            this.callback = callback\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        } else {\n            console.error(\"fromPosition\", fromPosition, \"toPosition\", toPosition)\n        }\n        this.view.positionsAnimationTask = Utils.createTask()\n        this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n            type: ANIMATION_EVENT_TYPE.start\n        })\n    }\n\n    static seekChanges(fromSquares, toSquares) {\n        const appearedList = [], disappearedList = [], changes = []\n        for (let i = 0; i < 64; i++) {\n            const previousSquare = fromSquares[i]\n            const newSquare = toSquares[i]\n            if (newSquare !== previousSquare) {\n                if (newSquare) {\n                    appearedList.push({piece: newSquare, index: i})\n                }\n                if (previousSquare) {\n                    disappearedList.push({piece: previousSquare, index: i})\n                }\n            }\n        }\n        appearedList.forEach((appeared) => {\n            let shortestDistance = 8\n            let foundMoved = null\n            disappearedList.forEach((disappeared) => {\n                if (appeared.piece === disappeared.piece) {\n                    const moveDistance = PositionsAnimation.squareDistance(appeared.index, disappeared.index)\n                    if (moveDistance < shortestDistance) {\n                        foundMoved = disappeared\n                        shortestDistance = moveDistance\n                    }\n                }\n            })\n            if (foundMoved) {\n                disappearedList.splice(disappearedList.indexOf(foundMoved), 1) // remove from disappearedList, because it is moved now\n                changes.push({\n                    type: CHANGE_TYPE.move,\n                    piece: appeared.piece,\n                    atIndex: foundMoved.index,\n                    toIndex: appeared.index\n                })\n            } else {\n                changes.push({type: CHANGE_TYPE.appear, piece: appeared.piece, atIndex: appeared.index})\n            }\n        })\n        disappearedList.forEach((disappeared) => {\n            changes.push({type: CHANGE_TYPE.disappear, piece: disappeared.piece, atIndex: disappeared.index})\n        })\n        return changes\n    }\n\n    createAnimation(fromSquares, toSquares) {\n        const changes = PositionsAnimation.seekChanges(fromSquares, toSquares)\n        const animatedElements = []\n        changes.forEach((change) => {\n            const animatedItem = {\n                type: change.type\n            }\n            switch (change.type) {\n                case CHANGE_TYPE.move:\n                    animatedItem.element = this.view.getPieceElement(Position.indexToSquare(change.atIndex))\n                    animatedItem.element.parentNode.appendChild(animatedItem.element) // move element to top layer\n                    animatedItem.atPoint = this.view.indexToPoint(change.atIndex)\n                    animatedItem.toPoint = this.view.indexToPoint(change.toIndex)\n                    break\n                case CHANGE_TYPE.appear:\n                    animatedItem.element = this.view.drawPieceOnSquare(Position.indexToSquare(change.atIndex), change.piece)\n                    animatedItem.element.style.opacity = 0\n                    break\n                case CHANGE_TYPE.disappear:\n                    animatedItem.element = this.view.getPieceElement(Position.indexToSquare(change.atIndex))\n                    break\n            }\n            animatedElements.push(animatedItem)\n        })\n        return animatedElements\n    }\n\n    animationStep(time) {\n        if(!this.view || !this.view.chessboard.state) { // board was destroyed\n            return\n        }\n        if (!this.startTime) {\n            this.startTime = time\n        }\n        const timeDiff = time - this.startTime\n        if (timeDiff <= this.duration) {\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        } else {\n            cancelAnimationFrame(this.frameHandle)\n            this.animatedElements.forEach((animatedItem) => {\n                if (animatedItem.type === CHANGE_TYPE.disappear) {\n                    Svg.removeElement(animatedItem.element)\n                }\n            })\n            this.view.positionsAnimationTask.resolve()\n            this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n                type: ANIMATION_EVENT_TYPE.end\n            })\n            this.callback()\n            return\n        }\n        const t = Math.min(1, timeDiff / this.duration)\n        let progress = t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t // easeInOut\n        if (isNaN(progress) || progress > 0.99) {\n            progress = 1\n        }\n        this.animatedElements.forEach((animatedItem) => {\n            if (animatedItem.element) {\n                switch (animatedItem.type) {\n                    case CHANGE_TYPE.move:\n                        animatedItem.element.transform.baseVal.removeItem(0)\n                        const transform = (this.view.svg.createSVGTransform())\n                        transform.setTranslate(\n                            animatedItem.atPoint.x + (animatedItem.toPoint.x - animatedItem.atPoint.x) * progress,\n                            animatedItem.atPoint.y + (animatedItem.toPoint.y - animatedItem.atPoint.y) * progress)\n                        animatedItem.element.transform.baseVal.appendItem(transform)\n                        break\n                    case CHANGE_TYPE.appear:\n                        animatedItem.element.style.opacity = Math.round(progress * 100) / 100\n                        break\n                    case CHANGE_TYPE.disappear:\n                        animatedItem.element.style.opacity = Math.round((1 - progress) * 100) / 100\n                        break\n                }\n            } else {\n                console.warn(\"animatedItem has no element\", animatedItem)\n            }\n        })\n        this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n            type: ANIMATION_EVENT_TYPE.frame,\n            progress: progress\n        })\n    }\n\n    static squareDistance(index1, index2) {\n        const file1 = index1 % 8\n        const rank1 = Math.floor(index1 / 8)\n        const file2 = index2 % 8\n        const rank2 = Math.floor(index2 / 8)\n        return Math.max(Math.abs(rank2 - rank1), Math.abs(file2 - file1))\n    }\n\n}\n\nexport class PositionAnimationsQueue extends PromiseQueue {\n\n    constructor(chessboard) {\n        super()\n        this.chessboard = chessboard\n    }\n\n    async enqueuePositionChange(positionFrom, positionTo, animated) {\n        if(positionFrom.getFen() === positionTo.getFen()) {\n            return Promise.resolve()\n        } else {\n            return super.enqueue(() => new Promise((resolve) => {\n                let duration = animated ? this.chessboard.props.style.animationDuration : 0\n                if (this.queue.length > 0) {\n                    duration = duration / (1 + Math.pow(this.queue.length / 5, 2))\n                }\n                new PositionsAnimation(this.chessboard.view,\n                    positionFrom, positionTo, animated ? duration : 0,\n                    () => {\n                        if (this.chessboard.view) { // if destroyed, no view anymore\n                            this.chessboard.view.redrawPieces(positionTo.squares)\n                        }\n                        resolve()\n                    }\n                )\n            }))\n        }\n    }\n\n    async enqueueTurnBoard(position, color, animated) {\n        return super.enqueue(() => new Promise((resolve) => {\n            const emptyPosition = new Position(FEN.empty)\n            let duration = animated ? this.chessboard.props.style.animationDuration : 0\n            if(this.queue.length > 0) {\n                duration = duration / (1 + Math.pow(this.queue.length / 5, 2))\n            }\n            new PositionsAnimation(this.chessboard.view,\n                position, emptyPosition, animated ? duration : 0,\n                () => {\n                    this.chessboard.state.orientation = color\n                    this.chessboard.view.redrawBoard()\n                    this.chessboard.view.redrawPieces(emptyPosition.squares)\n                    new PositionsAnimation(this.chessboard.view,\n                        emptyPosition, position, animated ? duration : 0,\n                        () => {\n                            this.chessboard.view.redrawPieces(position.squares)\n                            resolve()\n                        }\n                    )\n                }\n            )\n        }))\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {Svg} from \"../lib/Svg.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\nconst MOVE_INPUT_STATE = {\n    waitForInputStart: \"waitForInputStart\",\n    pieceClickedThreshold: \"pieceClickedThreshold\",\n    clickTo: \"clickTo\",\n    secondClickThreshold: \"secondClickThreshold\",\n    dragTo: \"dragTo\",\n    clickDragTo: \"clickDragTo\",\n    moveDone: \"moveDone\",\n    reset: \"reset\"\n}\n\nexport const MOVE_CANCELED_REASON = {\n    secondClick: \"secondClick\", // clicked the same piece\n    secondaryClick: \"secondaryClick\", // right click while moving\n    movedOutOfBoard: \"movedOutOfBoard\",\n    draggedBack: \"draggedBack\", // dragged to the start square\n    clickedAnotherPiece: \"clickedAnotherPiece\" // of the same color\n}\n\nconst DRAG_THRESHOLD = 4\n\nexport class VisualMoveInput {\n\n    constructor(view) {\n        this.view = view\n        this.chessboard = view.chessboard\n        this.moveInputState = null\n        this.fromSquare = null\n        this.toSquare = null\n\n        this.setMoveInputState(MOVE_INPUT_STATE.waitForInputStart)\n    }\n\n    moveInputStartedCallback(square) {\n        const result = this.view.moveInputStartedCallback(square)\n        if (result) {\n            this.chessboard.state.moveInputProcess = Utils.createTask()\n            this.chessboard.state.moveInputProcess.then((result) => {\n                if (this.moveInputState === MOVE_INPUT_STATE.waitForInputStart ||\n                    this.moveInputState === MOVE_INPUT_STATE.moveDone) {\n                    this.view.moveInputFinishedCallback(this.fromSquare, this.toSquare, result)\n                }\n            })\n        }\n        return result\n    }\n\n    movingOverSquareCallback(fromSquare, toSquare) {\n        this.view.movingOverSquareCallback(fromSquare, toSquare)\n    }\n\n    validateMoveInputCallback(fromSquare, toSquare) {\n        const result = this.view.validateMoveInputCallback(fromSquare, toSquare)\n        this.chessboard.state.moveInputProcess.resolve(result)\n        return result\n    }\n\n    moveInputCanceledCallback(fromSquare, toSquare, reason) {\n        this.view.moveInputCanceledCallback(fromSquare, toSquare, reason)\n        this.chessboard.state.moveInputProcess.resolve()\n    }\n\n    setMoveInputState(newState, params = undefined) {\n        const prevState = this.moveInputState\n        this.moveInputState = newState\n\n        switch (newState) {\n\n            case MOVE_INPUT_STATE.waitForInputStart:\n                break\n\n            case MOVE_INPUT_STATE.pieceClickedThreshold:\n                if (MOVE_INPUT_STATE.waitForInputStart !== prevState && MOVE_INPUT_STATE.clickTo !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.pointerMoveListener) {\n                    removeEventListener(this.pointerMoveListener.type, this.pointerMoveListener)\n                    this.pointerMoveListener = null\n                }\n                if (this.pointerUpListener) {\n                    removeEventListener(this.pointerUpListener.type, this.pointerUpListener)\n                    this.pointerUpListener = null\n                }\n                this.fromSquare = params.square\n                this.toSquare = null\n                this.movedPiece = params.piece\n                this.startPoint = params.point\n                if (!this.pointerMoveListener && !this.pointerUpListener) {\n                    if (params.type === \"mousedown\") {\n                        this.pointerMoveListener = this.onPointerMove.bind(this)\n                        this.pointerMoveListener.type = \"mousemove\"\n                        addEventListener(\"mousemove\", this.pointerMoveListener)\n                        this.pointerUpListener = this.onPointerUp.bind(this)\n                        this.pointerUpListener.type = \"mouseup\"\n                        addEventListener(\"mouseup\", this.pointerUpListener)\n                    } else if (params.type === \"touchstart\") {\n                        this.pointerMoveListener = this.onPointerMove.bind(this)\n                        this.pointerMoveListener.type = \"touchmove\"\n                        addEventListener(\"touchmove\", this.pointerMoveListener)\n                        this.pointerUpListener = this.onPointerUp.bind(this)\n                        this.pointerUpListener.type = \"touchend\"\n                        addEventListener(\"touchend\", this.pointerUpListener)\n                    } else {\n                        throw Error(\"4b74af\")\n                    }\n                    if (!this.contextMenuListener) {\n                        this.contextMenuListener = this.onContextMenu.bind(this)\n                        this.chessboard.view.svg.addEventListener(\"contextmenu\", this.contextMenuListener)\n                    }\n                } else {\n                    throw Error(\"94ad0c\")\n                }\n                break\n\n            case MOVE_INPUT_STATE.clickTo:\n                if (this.draggablePiece) {\n                    Svg.removeElement(this.draggablePiece)\n                    this.draggablePiece = null\n                }\n                if (prevState === MOVE_INPUT_STATE.dragTo) {\n                    this.view.setPieceVisibility(params.square, true)\n                }\n                break\n\n            case MOVE_INPUT_STATE.secondClickThreshold:\n                if (MOVE_INPUT_STATE.clickTo !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                this.startPoint = params.point\n                break\n\n            case MOVE_INPUT_STATE.dragTo:\n                if (MOVE_INPUT_STATE.pieceClickedThreshold !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.view.setPieceVisibility(params.square, false)\n                    this.createDraggablePiece(params.piece)\n                }\n                break\n\n            case MOVE_INPUT_STATE.clickDragTo:\n                if (MOVE_INPUT_STATE.secondClickThreshold !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.view.setPieceVisibility(params.square, false)\n                    this.createDraggablePiece(params.piece)\n                }\n                break\n\n            case MOVE_INPUT_STATE.moveDone:\n                if ([MOVE_INPUT_STATE.dragTo, MOVE_INPUT_STATE.clickTo, MOVE_INPUT_STATE.clickDragTo].indexOf(prevState) === -1) {\n                    throw new Error(\"moveInputState\")\n                }\n                this.toSquare = params.square\n                if (this.toSquare && this.validateMoveInputCallback(this.fromSquare, this.toSquare)) {\n                    this.chessboard.movePiece(this.fromSquare, this.toSquare, prevState === MOVE_INPUT_STATE.clickTo).then(() => {\n                        if (prevState === MOVE_INPUT_STATE.clickTo) {\n                            this.view.setPieceVisibility(this.toSquare, true)\n                        }\n                        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                    })\n                } else {\n                    this.view.setPieceVisibility(this.fromSquare, true)\n                    this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                }\n                break\n\n            case MOVE_INPUT_STATE.reset:\n                if (this.fromSquare && !this.toSquare && this.movedPiece) {\n                    this.chessboard.state.position.setPiece(this.fromSquare, this.movedPiece)\n                }\n                this.fromSquare = null\n                this.toSquare = null\n                this.movedPiece = null\n                if (this.draggablePiece) {\n                    Svg.removeElement(this.draggablePiece)\n                    this.draggablePiece = null\n                }\n                if (this.pointerMoveListener) {\n                    removeEventListener(this.pointerMoveListener.type, this.pointerMoveListener)\n                    this.pointerMoveListener = null\n                }\n                if (this.pointerUpListener) {\n                    removeEventListener(this.pointerUpListener.type, this.pointerUpListener)\n                    this.pointerUpListener = null\n                }\n                if (this.contextMenuListener) {\n                    removeEventListener(\"contextmenu\", this.contextMenuListener)\n                    this.contextMenuListener = null\n                }\n                this.setMoveInputState(MOVE_INPUT_STATE.waitForInputStart)\n                // set temporarily hidden pieces visible again\n                const hiddenPieces = this.view.piecesGroup.querySelectorAll(\"[visibility=hidden]\")\n                for (let i = 0; i < hiddenPieces.length; i++) {\n                    hiddenPieces[i].removeAttribute(\"visibility\")\n                }\n                break\n\n            default:\n                throw Error(`260b09: moveInputState ${newState}`)\n        }\n    }\n\n    createDraggablePiece(pieceName) {\n        // maybe I should use the existing piece from the board and don't create a new one\n        if (this.draggablePiece) {\n            throw Error(\"draggablePiece already exists\")\n        }\n        this.draggablePiece = Svg.createSvg(document.body)\n        this.draggablePiece.classList.add(\"cm-chessboard-draggable-piece\")\n        this.draggablePiece.setAttribute(\"width\", this.view.squareWidth)\n        this.draggablePiece.setAttribute(\"height\", this.view.squareHeight)\n        this.draggablePiece.setAttribute(\"style\", \"pointer-events: none\")\n        this.draggablePiece.name = pieceName\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.view.getSpriteUrl()\n        const piece = Svg.addElement(this.draggablePiece, \"use\", {\n            href: `${spriteUrl}#${pieceName}`\n        })\n        const scaling = this.view.squareHeight / this.chessboard.props.style.pieces.tileSize\n        const transformScale = (this.draggablePiece.createSVGTransform())\n        transformScale.setScale(scaling, scaling)\n        piece.transform.baseVal.appendItem(transformScale)\n    }\n\n    moveDraggablePiece(x, y) {\n        this.draggablePiece.setAttribute(\"style\",\n            `pointer-events: none; position: absolute; left: ${x - (this.view.squareHeight / 2)}px; top: ${y - (this.view.squareHeight / 2)}px`)\n    }\n\n    onPointerDown(e) {\n        if (!(e.type === \"mousedown\" && e.button === 0 || e.type === \"touchstart\")) {\n            return\n        }\n        const square = e.target.getAttribute(\"data-square\")\n        if (!square) { // pointer on square\n            return\n        }\n        const pieceName = this.chessboard.getPiece(square)\n        let color\n        if (pieceName) {\n            color = pieceName ? pieceName.substring(0, 1) : null\n            // allow scrolling, if not pointed on draggable piece\n            if (color === \"w\" && this.chessboard.state.inputWhiteEnabled ||\n                color === \"b\" && this.chessboard.state.inputBlackEnabled) {\n                e.preventDefault()\n            }\n        }\n        if (this.moveInputState !== MOVE_INPUT_STATE.waitForInputStart ||\n            this.chessboard.state.inputWhiteEnabled && color === \"w\" ||\n            this.chessboard.state.inputBlackEnabled && color === \"b\") {\n            let point\n            if (e.type === \"mousedown\") {\n                point = {x: e.clientX, y: e.clientY}\n            } else if (e.type === \"touchstart\") {\n                point = {x: e.touches[0].clientX, y: e.touches[0].clientY}\n            }\n            if (this.moveInputState === MOVE_INPUT_STATE.waitForInputStart && pieceName && this.moveInputStartedCallback(square)) {\n                this.setMoveInputState(MOVE_INPUT_STATE.pieceClickedThreshold, {\n                    square: square,\n                    piece: pieceName,\n                    point: point,\n                    type: e.type\n                })\n            } else if (this.moveInputState === MOVE_INPUT_STATE.clickTo) {\n                if (square === this.fromSquare) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.secondClickThreshold, {\n                        square: square,\n                        piece: pieceName,\n                        point: point,\n                        type: e.type\n                    })\n                } else {\n                    const pieceName = this.chessboard.getPiece(square)\n                    const pieceColor = pieceName ? pieceName.substring(0, 1) : null\n                    const startPieceName = this.chessboard.getPiece(this.fromSquare)\n                    const startPieceColor = startPieceName ? startPieceName.substring(0, 1) : null\n                    if (color && startPieceColor === pieceColor) {\n                        this.moveInputCanceledCallback(this.fromSquare, square, MOVE_CANCELED_REASON.clickedAnotherPiece)\n                        if (this.moveInputStartedCallback(square)) {\n                            this.setMoveInputState(MOVE_INPUT_STATE.pieceClickedThreshold, {\n                                square: square,\n                                piece: pieceName,\n                                point: point,\n                                type: e.type\n                            })\n                        } else {\n                            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                        }\n                    } else {\n                        this.setMoveInputState(MOVE_INPUT_STATE.moveDone, {square: square})\n                    }\n                }\n            }\n        }\n    }\n\n    onPointerMove(e) {\n        let pageX, pageY, clientX, clientY, target\n        if (e.type === \"mousemove\") {\n            clientX = e.clientX\n            clientY = e.clientY\n            pageX = e.pageX\n            pageY = e.pageY\n            target = e.target\n        } else if (e.type === \"touchmove\") {\n            clientX = e.touches[0].clientX\n            clientY = e.touches[0].clientY\n            pageX = e.touches[0].pageX\n            pageY = e.touches[0].pageY\n            target = document.elementFromPoint(clientX, clientY)\n        }\n        if (this.moveInputState === MOVE_INPUT_STATE.pieceClickedThreshold || this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n            if (Math.abs(this.startPoint.x - clientX) > DRAG_THRESHOLD || Math.abs(this.startPoint.y - clientY) > DRAG_THRESHOLD) {\n                if (this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.clickDragTo, {\n                        square: this.fromSquare,\n                        piece: this.movedPiece\n                    })\n                } else {\n                    this.setMoveInputState(MOVE_INPUT_STATE.dragTo, {square: this.fromSquare, piece: this.movedPiece})\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.moveDraggablePiece(pageX, pageY)\n                }\n            }\n        } else if (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo || this.moveInputState === MOVE_INPUT_STATE.clickTo) {\n            if (target && target.getAttribute && target.parentElement === this.view.boardGroup) {\n                const square = target.getAttribute(\"data-square\")\n                if (square !== this.fromSquare && square !== this.toSquare) {\n                    this.toSquare = square\n                    this.movingOverSquareCallback(this.fromSquare, this.toSquare)\n                } else if (square === this.fromSquare && this.toSquare !== null) {\n                    this.toSquare = null\n                    this.movingOverSquareCallback(this.fromSquare, null)\n                }\n            } else if (this.toSquare !== null) {\n                this.toSquare = null\n                this.movingOverSquareCallback(this.fromSquare, null)\n            }\n\n            if (this.view.chessboard.state.inputEnabled() && (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo)) {\n                this.moveDraggablePiece(pageX, pageY)\n            }\n        }\n    }\n\n    onPointerUp(e) {\n        let target\n        if (e.type === \"mouseup\") {\n            target = e.target\n        } else if (e.type === \"touchend\") {\n            target = document.elementFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY)\n        }\n        if (target && target.getAttribute) {\n            const square = target.getAttribute(\"data-square\")\n\n            if (square) {\n                if (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo) {\n                    if (this.fromSquare === square) {\n                        if (this.moveInputState === MOVE_INPUT_STATE.clickDragTo) {\n                            this.chessboard.state.position.setPiece(this.fromSquare, this.movedPiece)\n                            this.view.setPieceVisibility(this.fromSquare)\n                            this.moveInputCanceledCallback(square, null, MOVE_CANCELED_REASON.draggedBack)\n                            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                        } else {\n                            this.setMoveInputState(MOVE_INPUT_STATE.clickTo, {square: square})\n                        }\n                    } else {\n                        this.setMoveInputState(MOVE_INPUT_STATE.moveDone, {square: square})\n                    }\n                } else if (this.moveInputState === MOVE_INPUT_STATE.pieceClickedThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.clickTo, {square: square})\n                } else if (this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                    this.moveInputCanceledCallback(square, null, MOVE_CANCELED_REASON.secondClick)\n                }\n            } else {\n                this.view.redrawPieces()\n                const moveStartSquare = this.fromSquare\n                this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                this.moveInputCanceledCallback(moveStartSquare, null, MOVE_CANCELED_REASON.movedOutOfBoard)\n            }\n        } else {\n            this.view.redrawPieces()\n            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n        }\n    }\n\n    onContextMenu(e) { // while moving\n        e.preventDefault()\n        this.view.redrawPieces()\n        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n        this.moveInputCanceledCallback(this.fromSquare, null, MOVE_CANCELED_REASON.secondaryClick)\n    }\n\n    isDragging() {\n        return this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo\n    }\n\n    destroy() {\n        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {VisualMoveInput} from \"./VisualMoveInput.js\"\nimport {Position} from \"../model/Position.js\"\nimport {EXTENSION_POINT} from \"../model/Extension.js\"\nimport {Svg} from \"../lib/Svg.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\nexport const COLOR = {\n    white: \"w\",\n    black: \"b\"\n}\nexport const INPUT_EVENT_TYPE = {\n    moveInputStarted: \"moveInputStarted\",\n    movingOverSquare: \"movingOverSquare\", // while dragging or hover after click\n    validateMoveInput: \"validateMoveInput\",\n    moveInputCanceled: \"moveInputCanceled\",\n    moveInputFinished: \"moveInputFinished\"\n}\nexport const POINTER_EVENTS = {\n    pointercancel: \"pointercancel\",\n    pointerdown: \"pointerdown\",\n    pointerenter: \"pointerenter\",\n    pointerleave: \"pointerleave\",\n    pointermove: \"pointermove\",\n    pointerout: \"pointerout\",\n    pointerover: \"pointerover\",\n    pointerup: \"pointerup\"\n}\nexport const BORDER_TYPE = {\n    none: \"none\", // no border\n    thin: \"thin\", // thin border\n    frame: \"frame\" // wide border with coordinates in it\n}\n\nexport class ChessboardView {\n    constructor(chessboard) {\n        this.chessboard = chessboard\n        this.visualMoveInput = new VisualMoveInput(this)\n        if (chessboard.props.assetsCache) {\n            this.cacheSpriteToDiv(\"cm-chessboard-sprite\", this.getSpriteUrl())\n        }\n        this.container = document.createElement(\"div\")\n        this.chessboard.context.appendChild(this.container)\n        if (chessboard.props.responsive) {\n            if (typeof ResizeObserver !== \"undefined\") {\n                this.resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => { // prevents \"ResizeObserver loop completed with undelivered notifications.\"\n                        this.handleResize()\n                    })\n                })\n                this.resizeObserver.observe(this.chessboard.context)\n            } else {\n                this.resizeListener = this.handleResize.bind(this)\n                window.addEventListener(\"resize\", this.resizeListener)\n            }\n        }\n        this.positionsAnimationTask = Promise.resolve()\n        this.pointerDownListener = this.pointerDownHandler.bind(this)\n        this.container.addEventListener(\"mousedown\", this.pointerDownListener)\n        this.container.addEventListener(\"touchstart\", this.pointerDownListener, {passive: false})\n        this.createSvgAndGroups()\n        this.handleResize()\n    }\n\n    pointerDownHandler(e) {\n        this.visualMoveInput.onPointerDown(e)\n    }\n\n    destroy() {\n        this.visualMoveInput.destroy()\n        if (this.resizeObserver) {\n            this.resizeObserver.unobserve(this.chessboard.context)\n        }\n        if (this.resizeListener) {\n            window.removeEventListener(\"resize\", this.resizeListener)\n        }\n        this.chessboard.context.removeEventListener(\"mousedown\", this.pointerDownListener)\n        this.chessboard.context.removeEventListener(\"touchstart\", this.pointerDownListener)\n        Svg.removeElement(this.svg)\n        this.container.remove()\n    }\n\n    // Sprite //\n\n    cacheSpriteToDiv(wrapperId, url) {\n        if (!document.getElementById(wrapperId)) {\n            const wrapper = document.createElement(\"div\")\n            wrapper.style.transform = \"scale(0)\"\n            wrapper.style.position = \"absolute\"\n            wrapper.setAttribute(\"aria-hidden\", \"true\")\n            wrapper.id = wrapperId\n            document.body.appendChild(wrapper)\n            const xhr = new XMLHttpRequest()\n            xhr.open(\"GET\", url, true)\n            xhr.onload = function () {\n                wrapper.insertAdjacentHTML('afterbegin', xhr.response)\n            }\n            xhr.send()\n        }\n    }\n\n    createSvgAndGroups() {\n        this.svg = Svg.createSvg(this.container)\n        // let description = document.createElement(\"description\")\n        // description.innerText = \"Chessboard\"\n        // description.id = \"svg-description\"\n        // this.svg.appendChild(description)\n        let cssClass = this.chessboard.props.style.cssClass ? this.chessboard.props.style.cssClass : \"default\"\n        this.svg.setAttribute(\"class\", \"cm-chessboard border-type-\" + this.chessboard.props.style.borderType + \" \" + cssClass)\n        // this.svg.setAttribute(\"aria-describedby\", \"svg-description\")\n        this.svg.setAttribute(\"role\", \"img\")\n        this.updateMetrics()\n        this.boardGroup = Svg.addElement(this.svg, \"g\", {class: \"board\"})\n        this.coordinatesGroup = Svg.addElement(this.svg, \"g\", {class: \"coordinates\", \"aria-hidden\": \"true\"})\n        this.markersLayer = Svg.addElement(this.svg, \"g\", {class: \"markers-layer\"})\n        this.piecesLayer = Svg.addElement(this.svg, \"g\", {class: \"pieces-layer\"})\n        this.piecesGroup = Svg.addElement(this.piecesLayer, \"g\", {class: \"pieces\"})\n        this.markersTopLayer = Svg.addElement(this.svg, \"g\", {class: \"markers-top-layer\"})\n        this.interactiveTopLayer = Svg.addElement(this.svg, \"g\", {class: \"interactive-top-layer\"})\n    }\n\n    updateMetrics() {\n        const piecesTileSize = this.chessboard.props.style.pieces.tileSize\n        this.width = this.container.clientWidth\n        this.height = this.container.clientWidth * (this.chessboard.props.style.aspectRatio || 1)\n        if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n            this.borderSize = this.width / 25\n        } else if (this.chessboard.props.style.borderType === BORDER_TYPE.thin) {\n            this.borderSize = this.width / 320\n        } else {\n            this.borderSize = 0\n        }\n        this.innerWidth = this.width - 2 * this.borderSize\n        this.innerHeight = this.height - 2 * this.borderSize\n        this.squareWidth = this.innerWidth / 8\n        this.squareHeight = this.innerHeight / 8\n        this.scalingX = this.squareWidth / piecesTileSize\n        this.scalingY = this.squareHeight / piecesTileSize\n        this.pieceXTranslate = (this.squareWidth / 2 - piecesTileSize * this.scalingY / 2)\n    }\n\n    handleResize() {\n        this.container.style.width = (this.chessboard.context.clientWidth) + \"px\"\n        this.container.style.height = (this.chessboard.context.clientWidth * this.chessboard.props.style.aspectRatio) + \"px\"\n        if (this.container.clientWidth !== this.width || this.container.clientHeight !== this.height) {\n            this.updateMetrics()\n            this.redrawBoard()\n            this.redrawPieces()\n        }\n        this.svg.setAttribute(\"width\", \"100%\")\n        this.svg.setAttribute(\"height\", \"100%\")\n    }\n\n    redrawBoard() {\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.beforeRedrawBoard)\n        this.redrawSquares()\n        this.drawCoordinates()\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.afterRedrawBoard)\n        this.visualizeInputState()\n    }\n\n    // Board //\n\n    redrawSquares() {\n        while (this.boardGroup.firstChild) {\n            this.boardGroup.removeChild(this.boardGroup.lastChild)\n        }\n\n        let boardBorder = Svg.addElement(this.boardGroup, \"rect\", {width: this.width, height: this.height})\n        boardBorder.setAttribute(\"class\", \"border\")\n        if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n            const innerPos = this.borderSize\n            let borderInner = Svg.addElement(this.boardGroup, \"rect\", {\n                x: innerPos, y: innerPos, width: this.width - innerPos * 2, height: this.height - innerPos * 2\n            })\n            borderInner.setAttribute(\"class\", \"border-inner\")\n        }\n\n        for (let i = 0; i < 64; i++) {\n            const index = this.chessboard.state.orientation === COLOR.white ? i : 63 - i\n            const squareColor = ((9 * index) & 8) === 0 ? 'black' : 'white'\n            const fieldClass = `square ${squareColor}`\n            const point = this.squareToPoint(Position.indexToSquare(index))\n            const squareRect = Svg.addElement(this.boardGroup, \"rect\", {\n                x: point.x, y: point.y, width: this.squareWidth, height: this.squareHeight\n            })\n            squareRect.setAttribute(\"class\", fieldClass)\n            squareRect.setAttribute(\"data-square\", Position.indexToSquare(index))\n        }\n    }\n\n    drawCoordinates() {\n        if (!this.chessboard.props.style.showCoordinates) {\n            return\n        }\n        while (this.coordinatesGroup.firstChild) {\n            this.coordinatesGroup.removeChild(this.coordinatesGroup.lastChild)\n        }\n        const inline = this.chessboard.props.style.borderType !== BORDER_TYPE.frame\n        for (let file = 0; file < 8; file++) {\n            let x = this.borderSize + (17 + this.chessboard.props.style.pieces.tileSize * file) * this.scalingX\n            let y = this.height - this.scalingY * 3.5\n            let cssClass = \"coordinate file\"\n            if (inline) {\n                x = x + this.scalingX * 15.5\n                cssClass += file % 2 ? \" white\" : \" black\"\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass, x: x, y: y, style: `font-size: ${this.scalingY * 10}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = String.fromCharCode(97 + file)\n            } else {\n                textElement.textContent = String.fromCharCode(104 - file)\n            }\n        }\n        for (let rank = 0; rank < 8; rank++) {\n            let x = (this.borderSize / 3.7)\n            let y = this.borderSize + 25 * this.scalingY + rank * this.squareHeight\n            let cssClass = \"coordinate rank\"\n            if (inline) {\n                cssClass += rank % 2 ? \" black\" : \" white\"\n                if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n                    x = x + this.scalingX * 10\n                    y = y - this.scalingY * 15\n                } else {\n                    x = x + this.scalingX * 2\n                    y = y - this.scalingY * 15\n                }\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass, x: x, y: y, style: `font-size: ${this.scalingY * 10}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = \"\" + (8 - rank)\n            } else {\n                textElement.textContent = \"\" + (1 + rank)\n            }\n        }\n    }\n\n    // Pieces //\n\n    redrawPieces(squares = this.chessboard.state.position.squares) {\n        const childNodes = Array.from(this.piecesGroup.childNodes)\n        const isDragging = this.visualMoveInput.isDragging()\n        for (let i = 0; i < 64; i++) {\n            const pieceName = squares[i]\n            if (pieceName) {\n                const square = Position.indexToSquare(i)\n                this.drawPieceOnSquare(square, pieceName, isDragging && square === this.visualMoveInput.fromSquare)\n            }\n        }\n        for (const childNode of childNodes) {\n            this.piecesGroup.removeChild(childNode)\n        }\n    }\n\n    drawPiece(parentGroup, pieceName, point) {\n        const pieceGroup = Svg.addElement(parentGroup, \"g\", {})\n        pieceGroup.setAttribute(\"data-piece\", pieceName)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        pieceGroup.transform.baseVal.appendItem(transform)\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.getSpriteUrl()\n        const pieceUse = Svg.addElement(pieceGroup, \"use\", {\n            href: `${spriteUrl}#${pieceName}`, class: \"piece\"\n        })\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingY, this.scalingY)\n        pieceUse.transform.baseVal.appendItem(transformScale)\n        return pieceGroup\n    }\n\n    drawPieceOnSquare(square, pieceName, hidden = false) {\n        const pieceGroup = Svg.addElement(this.piecesGroup, \"g\", {})\n        pieceGroup.setAttribute(\"data-piece\", pieceName)\n        pieceGroup.setAttribute(\"data-square\", square)\n        if (hidden) {\n            pieceGroup.setAttribute(\"visibility\", \"hidden\")\n        }\n        const point = this.squareToPoint(square)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        pieceGroup.transform.baseVal.appendItem(transform)\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.getSpriteUrl()\n        const pieceUse = Svg.addElement(pieceGroup, \"use\", {\n            href: `${spriteUrl}#${pieceName}`, class: \"piece\"\n        })\n        // center on square\n        const transformTranslate = (this.svg.createSVGTransform())\n        transformTranslate.setTranslate(this.pieceXTranslate, 0)\n        pieceUse.transform.baseVal.appendItem(transformTranslate)\n        // scale\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingY, this.scalingY)\n        pieceUse.transform.baseVal.appendItem(transformScale)\n        return pieceGroup\n    }\n\n    setPieceVisibility(square, visible = true) {\n        const piece = this.getPieceElement(square)\n        if (piece) {\n            if (visible) {\n                piece.setAttribute(\"visibility\", \"visible\")\n            } else {\n                piece.setAttribute(\"visibility\", \"hidden\")\n            }\n        } else {\n            console.warn(\"no piece on\", square)\n        }\n    }\n\n    getPieceElement(square) {\n        if (!square || square.length < 2) {\n            console.warn(\"invalid square\", square)\n            return null\n        }\n        const piece = this.piecesGroup.querySelector(`g[data-square='${square}']`)\n        if (!piece) {\n            console.warn(\"no piece on\", square)\n            return null\n        }\n        return piece\n    }\n\n    // enable and disable move input //\n\n    enableMoveInput(eventHandler, color = null) {\n        if (this.chessboard.state.moveInputCallback) {\n            throw Error(\"moveInput already enabled\")\n        }\n        if (color === COLOR.white) {\n            this.chessboard.state.inputWhiteEnabled = true\n        } else if (color === COLOR.black) {\n            this.chessboard.state.inputBlackEnabled = true\n        } else {\n            this.chessboard.state.inputWhiteEnabled = true\n            this.chessboard.state.inputBlackEnabled = true\n        }\n        this.chessboard.state.moveInputCallback = eventHandler\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInputToggled, {enabled: true, color: color})\n        this.visualizeInputState()\n    }\n\n    disableMoveInput() {\n        this.chessboard.state.inputWhiteEnabled = false\n        this.chessboard.state.inputBlackEnabled = false\n        this.chessboard.state.moveInputCallback = null\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInputToggled, {enabled: false})\n        this.visualizeInputState()\n    }\n\n    // callbacks //\n\n    moveInputStartedCallback(square) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputStarted,\n            square: square, /** square is deprecated, use squareFrom (2023-05-22) */\n            squareFrom: square,\n            piece: this.chessboard.getPiece(square)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n        return data.moveInputCallbackResult\n    }\n\n    movingOverSquareCallback(squareFrom, squareTo) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.movingOverSquare,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            piece: this.chessboard.getPiece(squareFrom)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    validateMoveInputCallback(squareFrom, squareTo) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.validateMoveInput,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            piece: this.chessboard.getPiece(squareFrom)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n        return data.moveInputCallbackResult\n    }\n\n    moveInputCanceledCallback(squareFrom, squareTo, reason) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputCanceled,\n            reason: reason,\n            squareFrom: squareFrom,\n            squareTo: squareTo\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    moveInputFinishedCallback(squareFrom, squareTo, legalMove) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputFinished,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            legalMove: legalMove\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    // Helpers //\n\n    visualizeInputState() {\n        if (this.chessboard.state) { // fix https://github.com/shaack/cm-chessboard/issues/47\n            if (this.chessboard.state.inputWhiteEnabled || this.chessboard.state.inputBlackEnabled) {\n                this.boardGroup.setAttribute(\"class\", \"board input-enabled\")\n            } else {\n                this.boardGroup.setAttribute(\"class\", \"board\")\n            }\n        }\n    }\n\n    indexToPoint(index) {\n        let x, y\n        if (this.chessboard.state.orientation === COLOR.white) {\n            x = this.borderSize + (index % 8) * this.squareWidth\n            y = this.borderSize + (7 - Math.floor(index / 8)) * this.squareHeight\n        } else {\n            x = this.borderSize + (7 - index % 8) * this.squareWidth\n            y = this.borderSize + (Math.floor(index / 8)) * this.squareHeight\n        }\n        return {x: x, y: y}\n    }\n\n    squareToPoint(square) {\n        const index = Position.squareToIndex(square)\n        return this.indexToPoint(index)\n    }\n\n    getSpriteUrl() {\n        if (Utils.isAbsoluteUrl(this.chessboard.props.style.pieces.file)) {\n            return this.chessboard.props.style.pieces.file\n        } else {\n            return this.chessboard.props.assetsUrl + this.chessboard.props.style.pieces.file\n        }\n    }\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {ChessboardState} from \"./model/ChessboardState.js\"\nimport {FEN, Position} from \"./model/Position.js\"\nimport {PositionAnimationsQueue} from \"./view/PositionAnimationsQueue.js\"\nimport {EXTENSION_POINT} from \"./model/Extension.js\"\nimport {ChessboardView, COLOR, INPUT_EVENT_TYPE, BORDER_TYPE, POINTER_EVENTS} from \"./view/ChessboardView.js\"\nimport {Utils} from \"./lib/Utils.js\"\n\nexport const PIECE = {\n    wp: \"wp\", wb: \"wb\", wn: \"wn\", wr: \"wr\", wq: \"wq\", wk: \"wk\",\n    bp: \"bp\", bb: \"bb\", bn: \"bn\", br: \"br\", bq: \"bq\", bk: \"bk\"\n}\nexport const PIECE_TYPE = {\n    pawn: \"p\", knight: \"n\", bishop: \"b\", rook: \"r\", queen: \"q\", king: \"k\"\n}\nexport const PIECES_FILE_TYPE = {\n    svgSprite: \"svgSprite\"\n}\nexport {COLOR}\nexport {INPUT_EVENT_TYPE}\nexport {POINTER_EVENTS}\nexport {BORDER_TYPE}\nexport {FEN}\n\nexport class Chessboard {\n\n    constructor(context, props = {}) {\n        if (!context) {\n            throw new Error(\"container element is \" + context)\n        }\n        this.context = context\n        this.id = (Math.random() + 1).toString(36).substring(2, 8)\n        this.extensions = []\n        this.props = {\n            position: FEN.empty, // set position as fen, use FEN.start or FEN.empty as shortcuts\n            orientation: COLOR.white, // white on bottom\n            responsive: true, // resize the board automatically to the size of the context element\n            assetsUrl: \"./assets/\", // put all css and sprites in this folder, will be ignored for absolute urls of assets files\n            assetsCache: true, // cache the sprites, deactivate if you want to use multiple pieces sets in one page\n            style: {\n                cssClass: \"default\", // set the css theme of the board, try \"green\", \"blue\" or \"chess-club\"\n                showCoordinates: true, // show ranks and files\n                borderType: BORDER_TYPE.none, // \"thin\" thin border, \"frame\" wide border with coordinates in it, \"none\" no border\n                aspectRatio: 1, // height/width of the board\n                pieces: {\n                    type: PIECES_FILE_TYPE.svgSprite, // pieces are in an SVG sprite, no other type supported for now\n                    file: \"pieces/standard.svg\", // the filename of the sprite in `assets/pieces/` or an absolute url like `https://…` or `/…`\n                    tileSize: 40 // the tile size in the sprite\n                },\n                animationDuration: 300 // pieces animation duration in milliseconds. Disable all animations with `0`\n            },\n            extensions: [ /* {class: ExtensionClass, props: { ... }} */] // add extensions here\n        }\n        Utils.mergeObjects(this.props, props)\n        this.state = new ChessboardState()\n        this.view = new ChessboardView(this)\n        this.positionAnimationsQueue = new PositionAnimationsQueue(this)\n        this.state.orientation = this.props.orientation\n        // instantiate extensions\n        for (const extensionData of this.props.extensions) {\n            this.addExtension(extensionData.class, extensionData.props)\n        }\n        this.view.redrawBoard()\n        this.state.position = new Position(this.props.position)\n        this.view.redrawPieces()\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        this.initialized = Promise.resolve() // deprecated 2023-09-19 don't use this anymore\n    }\n\n    // API //\n\n    async setPiece(square, piece, animated = false) {\n        const positionFrom = this.state.position.clone()\n        this.state.position.setPiece(square, piece)\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async movePiece(squareFrom, squareTo, animated = false) {\n        const positionFrom = this.state.position.clone()\n        this.state.position.movePiece(squareFrom, squareTo)\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async setPosition(fen, animated = false) {\n        const positionFrom = this.state.position.clone()\n        const positionTo = new Position(fen)\n        if (positionFrom.getFen() !== positionTo.getFen()) {\n            this.state.position.setFen(fen)\n            this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        }\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async setOrientation(color, animated = false) {\n        const position = this.state.position.clone()\n        if (this.boardTurning) {\n            console.warn(\"setOrientation is only once in queue allowed\")\n            return\n        }\n        this.boardTurning = true\n        return this.positionAnimationsQueue.enqueueTurnBoard(position, color, animated).then(() => {\n            this.boardTurning = false\n            this.state.invokeExtensionPoints(EXTENSION_POINT.boardChanged)\n        })\n    }\n\n    getPiece(square) {\n        return this.state.position.getPiece(square)\n    }\n\n    getPosition() {\n        return this.state.position.getFen()\n    }\n\n    getOrientation() {\n        return this.state.orientation\n    }\n\n    enableMoveInput(eventHandler, color = undefined) {\n        this.view.enableMoveInput(eventHandler, color)\n    }\n\n    disableMoveInput() {\n        this.view.disableMoveInput()\n    }\n\n    isMoveInputEnabled() {\n        return this.state.inputWhiteEnabled || this.state.inputBlackEnabled\n    }\n\n    enableSquareSelect(eventType = POINTER_EVENTS.pointerdown, eventHandler) {\n        if (!this.squareSelectListener) {\n            this.squareSelectListener = function (e) {\n                const square = e.target.getAttribute(\"data-square\")\n                eventHandler({\n                    eventType: e.type,\n                    event: e,\n                    chessboard: this,\n                    square: square\n                })\n            }\n        }\n        this.context.addEventListener(eventType, this.squareSelectListener)\n        this.state.squareSelectEnabled = true\n        this.view.visualizeInputState()\n    }\n\n    disableSquareSelect(eventType) {\n        this.context.removeEventListener(eventType, this.squareSelectListener)\n        this.squareSelectListener = undefined\n        this.state.squareSelectEnabled = false\n        this.view.visualizeInputState()\n    }\n\n    isSquareSelectEnabled() {\n        return this.state.squareSelectEnabled\n    }\n\n    addExtension(extensionClass, props) {\n        if (this.getExtension(extensionClass)) {\n            throw Error(\"extension \\\"\" + extensionClass.name + \"\\\" already added\")\n        }\n        this.extensions.push(new extensionClass(this, props))\n    }\n\n    getExtension(extensionClass) {\n        for (const extension of this.extensions) {\n            if (extension instanceof extensionClass) {\n                return extension\n            }\n        }\n        return null\n    }\n\n    destroy() {\n        this.state.invokeExtensionPoints(EXTENSION_POINT.destroy)\n        this.positionAnimationsQueue.destroy()\n        this.view.destroy()\n        this.view = undefined\n        this.state = undefined\n    }\n\n}\n"],
  "mappings": "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",
  "names": ["result", "pieceName"]
}
